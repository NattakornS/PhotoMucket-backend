# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: rekognitionDemo

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: java8

# you can overwrite defaults here
  stage: dev
  region: us-east-1
iamRoleStatements:
   - Effect: "Allow"
     Action:
       - "dynamodb:*"
     Resource: "*"
   - Effect: "Allow"
     Action:
       - "s3:PutObject"
     Resource: { "Fn::Join" : ["", ["arn:aws:s3:::rekognitionDemo/*", { "Ref" : "" } ] ]  }
   - Effect: "Allow"
     Action:
       - "rekognition:*"
     Resource: "*"
# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
package:
  artifact: target/rekognitionDemo-dev.jar

functions:
  post-userData:
    handler: com.serverless.rekognition.postUserDataHandler
      - http:
          path: rekognition/upload
          method: post
  search-userData:
    handler: com.serverless.rekognition.getUserDataHandler
      - http:
          path: rekognition/search
          method: get

  generate-signurl:
    handler: com.serverless.rekognition.generateSignUrlHandler
      - http:
        path: rekognition/signUrl
        method: post
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
resources:
  Resources:
    NewResource:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: rekognitionDemo
    userInfoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: user_info
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
          - AttributeName: surename
            AttributeType: S
          - AttributeName: nickname
            AttributeType: S
          - AttributeName: email
            AttributeType: S
          - AttributeName: phone
            AttributeType: S
          - AttributeName: imageurl
            AttributeType: S
          - AttributeName: faceid
            AttributeType: S
          - AttributeName: imageid
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
          - AttributeName: surename
            KeyType: HASH
          - AttributeName: nickname
            KeyType: HASH
          - AttributeName: email
            KeyType: HASH
          - AttributeName: phone
            KeyType: RANGE
          - AttributeName: image
            KeyType: HASH
          - AttributeName: faceid
            KeyType: HASH
          - AttributeName: imageid
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

